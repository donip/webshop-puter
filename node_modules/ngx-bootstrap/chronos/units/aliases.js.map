{"version":3,"sources":["../../../.tmp/chronos/units/aliases.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAG5D,IAAM,OAAO,GAA8B,EAAE,CAAC;AAK9C,IAAM,SAAS,GAAkC;IAC/C,IAAI,EAAE,KAAK;IACX,IAAI,EAAE,OAAO;IACb,MAAM,EAAE,SAAS;IACjB,MAAM,EAAE,SAAS;IACjB,WAAW,EAAE,cAAc;CAC5B,CAAC;AAEF,MAAM,uBAAuB,IAAwB,EAAE,SAAiB;IACtE,IAAM,SAAS,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;IACrC,IAAI,KAAK,GAAG,IAAI,CAAC;IACjB,EAAE,CAAC,CAAC,SAAS,IAAI,SAAS,CAAC,CAAC,CAAC;QAC3B,KAAK,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC;IAC/B,CAAC;IACD,OAAO,CAAC,SAAS,CAAC,GAAG,OAAO,CAAI,SAAS,MAAG,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC;AAC7E,CAAC;AAED,MAAM,yBAAyB,KAAwB;IACrD,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,GAAG,SAAS,CAAC;AACtF,CAAC;AAED,MAAM,+BAA+B,WAAsC;IACzE,IAAM,eAAe,GAA8B,EAAE,CAAC;IACtD,IAAI,cAAc,CAAC;IACnB,IAAI,IAAI,CAAC;IAET,GAAG,CAAC,CAAC,IAAI,IAAI,WAAW,CAAC,CAAC,CAAC;QACzB,EAAE,CAAC,CAAC,UAAU,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;YAClC,cAAc,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC;YACtC,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;gBACnB,eAAe,CAAC,cAAc,CAAC,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;YACtD,CAAC;QACH,CAAC;IACH,CAAC;IAED,MAAM,CAAC,eAAsB,CAAC;AAChC,CAAC","file":"aliases.js","sourceRoot":"","sourcesContent":["import { hasOwnProp, isString } from '../utils/type-checks';\nimport { DateObject, UnitOfTime } from '../types';\n\nconst aliases: { [key: string]: string } = {};\n\nexport type ExtendedUnitOfTime = UnitOfTime | 'date' | 'week' | 'isoWeek' | 'dayOfYear' |\n  'weekday' | 'isoWeekday' | 'second' | 'millisecond' | 'minute' | 'hour' | 'quarter' | 'weekYear' | 'isoWeekYear';\n\nconst _mapUnits: { [key: string]: UnitOfTime } = {\n  date: 'day',\n  hour: 'hours',\n  minute: 'minutes',\n  second: 'seconds',\n  millisecond: 'milliseconds'\n};\n\nexport function addUnitAlias(unit: ExtendedUnitOfTime, shorthand: string): void {\n  const lowerCase = unit.toLowerCase();\n  let _unit = unit;\n  if (lowerCase in _mapUnits) {\n    _unit = _mapUnits[lowerCase];\n  }\n  aliases[lowerCase] = aliases[`${lowerCase}s`] = aliases[shorthand] = _unit;\n}\n\nexport function normalizeUnits(units: string | string[]): string {\n  return isString(units) ? aliases[units] || aliases[units.toLowerCase()] : undefined;\n}\n\nexport function normalizeObjectUnits(inputObject: { [key: string]: number }): DateObject {\n  const normalizedInput: { [key: string]: number } = {};\n  let normalizedProp;\n  let prop;\n\n  for (prop in inputObject) {\n    if (hasOwnProp(inputObject, prop)) {\n      normalizedProp = normalizeUnits(prop);\n      if (normalizedProp) {\n        normalizedInput[normalizedProp] = inputObject[prop];\n      }\n    }\n  }\n\n  return normalizedInput as any;\n}\n"]}